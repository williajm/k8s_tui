name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.25']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        # Clean up coverage file on Windows to avoid race condition
        if [ "$RUNNER_OS" == "Windows" ]; then rm -f .out || true; fi
      shell: bash

    - name: Check coverage threshold
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
      run: |
        go tool cover -func=coverage.out -o=coverage.txt
        total_coverage=$(grep total coverage.txt | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${total_coverage}%"

        # Set minimum coverage threshold (30%)
        threshold=30.0

        if (( $(echo "$total_coverage < $threshold" | bc -l) )); then
          echo "❌ Coverage ${total_coverage}% is below threshold ${threshold}%"
          exit 1
        else
          echo "✅ Coverage ${total_coverage}% meets threshold ${threshold}%"
        fi
      shell: bash

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Build
      run: go build -v -o k8s-tui${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cmd/k8s-tui

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: k8s-tui-${{ matrix.os }}
        path: k8s-tui${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        retention-days: 7
